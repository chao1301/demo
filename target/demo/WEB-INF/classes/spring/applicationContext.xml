<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="          
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd          
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd          
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd          
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd          
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
     >
      
    <!-- 属性文件读入 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:spring/jdbc.properties</value>
            </list>
        </property>
    </bean>
      
	<!-- 数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Mybatis's sqlSessionFactory config -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>		
	</bean>
	
	<!-- activiti workflow config -->
	<!-- 流程引擎配置bean -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
	    <property name="dataSource" ref="dataSource" />
	    <property name="transactionManager" ref="transactionManager" />
	    <!-- activiti数据表构建策略控制：（见DbSqlSession.performSchemaOperationsProcessEngineBuild方法）
		   false - 默认，引擎启动时检测数据库版本是否相符，不符就抛异常；
		   true - 引擎启动时升级数据表；
		   create - 引擎启动时创建表；
		   create-drop - 引擎启动时创建表、关闭时删除表；
		   drop-create - 引擎启动时先删除表再重新创建表
		-->
	    <property name="databaseSchemaUpdate" value="create-drop" />
	    <!-- 是否启动 jobExecutor-->
	    <property name="jobExecutorActivate" value="true" />
	    <!-- 邮件服务器配置-->
	    <property name="mailServerHost" value="mail.cttic.cn" />
	    <property name="mailServerPort" value="25" />
	    <property name="mailServerUsername" value="zhangchao" />
	    <property name="mailServerPassword" value="zhangchao2013" />
	    <!-- 自动部署
	    <property name="deploymentResources" value="classpath*:/diagrams/*" />
	     -->
	     <!-- 
	     	历史信息级别可以配置成以下几种:

			none: 忽略所有历史存档。这是流程执行时性能最好的状态，但没有任何历史信息可用。
			activity: 保存所有流程实例信息和活动实例信息。 在流程实例结束时, 最后一个流程实例中的最新的变量值将赋值给历史变量。 不会保存过程中的详细信息。
			audit: 这个是默认值. 它保存所有流程实例信息, 活动信息, 保证所有的变量和提交的表单属性保持同步 这样所有用户交互信息都是可追溯的，可以用来审计。
			full: 这个是最高级别的历史信息存档，同样也是最慢的。 这个级别存储发生在审核以及所有其它细节的信息, 主要是更新流程变量。
	      -->
	    <property name="history" value="audit" />
	    <!-- 
	    	配置部署缓存

			所有流程定义都被缓存了（解析之后）避免每次使用前都要访问数据库， 因为流程定义数据是不会改变的。 
			默认，不会限制这个缓存。如果想限制流程定义缓存，可以添加如下配置
		    <property name="processDefinitionCacheLimit" value="10" />
	     -->
	    <!-- 监听器配置  监听所有的事件 -->
	    <property name="eventListeners">
	      <list>
	         <bean class="org.activiti.test.financial.MyEventListener" />
	      </list>
	    </property>
	    <!-- 配置监听某种类型的事件 -->
	    <property name="typedEventListeners">
	      <map>
	        <entry key="JOB_EXECUTION_SUCCESS,JOB_EXECUTION_FAILURE" >
	          <list>
	            <bean class="org.activiti.test.financial.MyEventListener" />
	          </list>
	        </entry>
	      </map>
	    </property>
	    <!-- 配置是否生成流程定义图片 ，默认true-->
	    <property name="createDiagramOnDeploy" value="true" />
	     
	</bean>
	<!-- 流程引擎配置 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
	  	<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	<!-- 服务 -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService" />
    
	<!-- 启用事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceOperation"	expression="execution(* com.sper.demo.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice"	pointcut-ref="serviceOperation" />
	</aop:config>
	
	<!-- scan  mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">       
		<property name="basePackage" value="com.sper.demo.dao" />
	</bean>
    <!-- 激活annotation功能 -->
	<context:annotation-config />
	
	<!-- 激活annotation功能 -->
	<context:spring-configured/>
	<!-- 扫描指定package下所有带有如@controller,@services,@resource,并把所注释的注册为Spring Beans -->
	<context:component-scan base-package="com.sper.demo.service" />
	
	<!-- 国际化 -->
	<bean id = "messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n_messages"></property>
	</bean>
	
	<!-- 
	单元测试
     -->
    <bean id="activitiRule" class="org.activiti.engine.test.ActivitiRule">
	  <property name="processEngine" ref="processEngine" />
	</bean>
	
</beans> 